Protocols #1. 기본

1. 프로토콜은 API를 더욱 간결하게 표현하는 방법이다. 다른 타입 중의 하나인데 프로토콜이 하는 일은 API를 갖도록 해주되 클래스와 구조체를 완전하게 구현하는 대신 그냥 
실제로 필요한 것에 대해 클래스와 구조체가 무엇에 대한 것인지만 밝혀두는 것이다. 프로토콜을 사용하게 되면 간단히 선언된 메소드와 프로퍼티들로 된 집합체일 뿐이다. 그냥 
메소드 묶음 같은 것이거나 혹은 API의 일부분을 갖고 있을 수 있다 메소드의 묶음을 실행하는 녀석을 원하는 일부의 말 struct, enum, class 무엇이든 될 수 있다는 말이
다 그리고 이것이 프로토콜의 알파이자 오메가이다

2. 그러니까 프로토콜은 타입이고 타입을 사용하는 곳이라면 어디든 프로토콜을 사용할 수 있다 예를들어 UIViewController를 인자로 받는 함수가 있다면 프로토콜도 인자로 
받을 수 있다. 내가 필요한 UIViewController의 메소드를 갖는 포로토콜이며 그래서 그렇게 제한적일 필요가 없고 반드시 UIViewController 타입일 필요도 없다 단지 
그 메소드들을 실행 할 수 있는 것이라면 된다는 말이다 프로토콜은 포로토콜을 실행하는 클래스 안에서 시작하는데 class, struct, enum같은 곳말이다, 프로토콜은 자신은 
프로토콜을 실행하지 않기 때문에 프로토콜 자체는 프로퍼티와 메소드를 선언해 놓은 것일 뿐

3. 그렇지만 일단 extension은 프로토콜의 일부나 전부를 실행하기 위해서 사용가능하며 그래서 그냥 extension protocol 이라고 적으면 되는데 xtension protocol 
{ 라고 중괄호를 열면 프로토콜의 메소드나 프로퍼티의 일부를 실행하면 된다 , 프로토콜도 익스텐션처럼 저장 공간을 가지고 있지 않은데 그래서 저장공간이 있는 프로토콜을 실
행할 수 있는 방법이 없다 그러니까 var 변수를 둘 수 없다는 것이다 var 변수를 가질수는 있지만 연산 변수만 가능하다.


프로토콜을 사용하기 위한 4단계 절차가 존재하는데 

- 첫번째는 프로토콜 선언하기 , 프로토콜에 들어갈 메소드와 프로퍼티를 선언하는 작업이다 
- 두번째는 class, struct, enum이 자기가 이 프로토콜을 실행하겠다고 선언하는 것이다 
- 세번째로는 프로토콜을 실행하는 코드가 있는데 보통 프로토콜을 실행한다고 선언한 class, struct, enum이다
- 하지만 익스텐션 또한 있을 수도 있다는 것이다 그리고 실행할 저장 공간이 필요하다면 저장소가 필요하다면 실행하겠다고 선언한 class, struct, enum 안에 있어야 할 
것이다 

Initialization #種類

# Required init(必須初期化関数) 

1.キーワードrequiredとともにinitを表示できる。この言葉は子クラスは必ずこのinitを実行しなければならないという意味そして規則に従うなら、
相続も可能である無条件に実行しなければならない。必須である

- 例えば、UIViewのような場合、requiredinitがある

# Failableinit(失敗することができる初期化関数)

1.先立ってみた例題のようにString->Doubleで受ける時に失敗すれば、nilしてもらうように失敗しかねない関数をいう

Init?(arg1: Type1, …) {
	// might return nil in here
}
- 疑問符と定義することができ、疑問符を入れるようになったらこの初期化関数をクラスのオプショナルを返還する初期化関数で作ってくれる
、そしてこれが失敗すれば、nilを返還することになる、何か間違ってもnilを返還してnilはここに接近しようとする人に再び帰ってくることになる

2.Failableinitは非常に珍しいが、Imageに、例えばUIImageにimage(named:)で名前でイメージを探すことができなければnilを返還する

Let image = UIImage(named: “foo”) // image is an Optional UIImage(I.e. UIImage?)

If let image = UIImage (named: “foo”) {
	// image was successfully created
} else {
	// coulden’t crea
}

# Creating Objects

1.普通は、オブジェクトを作成するときに適切な因子で初期化関数を呼び出しして作る、タイプの名前を使用する

Let x = CalculatorBrain()
Let y = ComlicatedObject(arg1: 42, arg2: “hello”, …)
Let z = [String]()

-たまには他のオブジェクトがオブジェクトを作ってあげるのにそのオブジェクトがメソッドを呼び出してオブジェクトを作って与える。
しかし、何の準備もないままオブジェクトを作る時は上に表現のようにオブジェクトを作ってあげればなる

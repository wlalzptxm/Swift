Calss,Struct,Enum #3.参照タイプ

1. 参照は自動的にカウントされてその言葉は、スイフトにはGarbageCollectionがないということを意味する。つまり、参照タイプが作られれば、スイフトは、持続的に追跡を行いながら、
カウントをする例えば、参照していたポインタが領域を外れたり、最後のポインタを他のことを示すため、割り当てたりして教えているのがこれ以上ないなら、その直ちにヒプメモリで除去され
る。

- So that why Swift don’t have “Garbage Collection”

だから以前には、長い間ヒップメモリに滞在しているやつらを一度に収集したが、スイフトは、持続的な追跡を通じて不必要なデータを直ちに削除し、メモリを管理する、それで予測可能なメモリ
管理で私たちのためにわかってやってくれる自動的な管理システムになる。

2. もしクラスに定数があるのなら、きっとポインタを、依然として変えることができる。構造体ならvar y = x の値が独立して存在するが、クラスでvar y = x は二人とも同じヒップメ
モリーで参照をするためにyにメッセージを送れば、xにも送られことになる、それですべてのletの意味はポインタが変わらないだろうという言葉にもなる。

3. すると、どうclassとstructを区分して使うことができるか?基本的にオブジェクト指向だからクラスは使っていた通りに書けばよかったので一方、構造体はさらに根本的なタイプで使うこ
とになる。 例えばString、Double、Int、Array、Dictionaryのようなもっと原子の絵を描くための点や長方形のようなクラスよりも小柄で自ら自立可能であり、価格タイプを希望する
領域とか。

つまり、配信をしている時、値の概念を希望するようになる大きな状況。
